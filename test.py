import os
from openai import OpenAI
from google.colab import userdata

# OpenAI API 키 설정
api_key = userdata.get('gpt')

# 확인할 파일 목록
file_names = ["problem1.py", "problem2.py", "problem3.py", "problem4.py"]
gpt_messages = ["""시험 점수를 입력받아 90 ~ 100점은 A, 80 ~ 89점은 B, 70 ~ 79점은 C, 60 ~ 69점은 D, 나머지 점수는 F를 출력하는 프로그램을 작성하시오. 
                제출한 코드를 확인하여 앞에서 설명한 문제를 완벽하게 해결해서 구동하였을때를 100점으로 했을때 제출한 코드가 몇점인지 채점해줘,  
                결과는 채점한 내용에 대한 설명을 한국어로 두줄 이내로 간략하게 요약해서 알려주고 
                최종점수 : 
                이렇게 점수를 숫자로 알려줘
                최종점수를 말한 다음에는 아무 글자도 적지말아줘
                작성한 코드는 다음과 같아. \n
                """,

                """
                어떤 숫자 n이 자신을 제외한 모든 약수들의 합과 같으면, 그 수를 완전수라고 한다.
                예를 들어 6은 6 = 1 + 2 + 3 으로 완전수이다. n이 완전수인지 아닌지 판단해주는 프로그램을 작성하라. 
                입력은 테스트 케이스마다 한 줄 간격으로 n이 주어진다. (2 < n < 100,000) 입력의 마지막엔 -1이 주어진다. 
                출력은 테스트케이스 마다 한줄에 하나씩 출력해야 한다. n이 완전수라면, n을 n이 아닌 약수들의 합으로 나타내어 출력한다. 
                이때, 약수들은 오름차순으로 나열해야 한다. n이 완전수가 아니라면 n is NOT perfect. 를 출력한다.
                예를들어
                6
                12
                28
                -1
                가 한줄씩 순차적으로 입력되었을때
                출력은
                6 = 1 + 2 + 3
                12 is NOT perfect.
                28 = 1 + 2 + 4 + 7 + 14
                이다.
                제출한 코드를 확인하여 앞에서 설명한 문제를 완벽하게 해결해서 구동하였을때를 100점으로 했을때 제출한 코드가 몇점인지 채점해줘,  
                결과는 채점한 내용에 대한 설명을 한국어로 두줄 이내로 간략하게 요약해서 알려주고 
                최종점수 : 
                이렇게 점수를 숫자로 알려줘
                최종점수를 말한 다음에는 아무 글자도 적지말아줘
                작성한 코드는 다음과 같아. \n
                """,
                
                """
                두 자연수 A와 B에 대해서, A의 배수이면서 B의 배수인 자연수를 A와 B의 공배수라고 한다. 이런 공배수 중에서 가장 작은 수를 최소공배수라고 한다. 예를 들어, 6과 15의 공배수는 30, 60, 90등이 있으며, 최소 공배수는 30이다.
                두 자연수 A와 B가 주어졌을 때, A와 B의 최소공배수를 구하는 프로그램을 작성하시오.
                입력은 첫째 줄에 테스트 케이스의 개수 T(1 ≤ T ≤ 1,000)가 주어진다. 
                둘째 줄부터 T개의 줄에 걸쳐서 A와 B가 주어진다. (1 ≤ A, B ≤ 45,000)
                출력은 첫째 줄부터 T개의 줄에 A와 B의 최소공배수를 입력받은 순서대로 한 줄에 하나씩 출력한다.
                예를들어
                3
                1 45000
                6 10
                13 17
                가 한줄씩 순차적으로 입력되었을때
                출력은
                45000
                30
                221
                이다.
                제출한 코드를 확인하여 앞에서 설명한 문제를 완벽하게 해결해서 구동하였을때를 100점으로 했을때 제출한 코드가 몇점인지 채점해줘,
                결과는 채점한 내용에 대한 설명을 한국어로 두줄 이내로 간략하게 요약해서 알려주고 
                최종점수 : 
                이렇게 점수를 숫자로 알려줘
                최종점수를 말한 다음에는 아무 글자도 적지말아줘
                작성한 코드는 다음과 같아. \n
                """,

                """
                노라와 코딩이는 서로 솔루션을 토론 하면서 다른 사람이 자신들의 솔루션을 듣지 못하게 하도록 서로 메시지를 주고받을 때 메시지를 암호화 하여서 주고받았다.
                암호를 만드는 방법은 다음과 같다.
                먼저 암호화 할 문자열을 1,1부터 위에서 아래 순서대로 채운다.
                그리고 가장 밑의 행을 채운 후에는 오른쪽 열에서 다시 같은 과정을 반복한다.
                만약에 abcdefghijkl 라는 문자열을 3개의 열로 암호화 한다고 하자.
                그다음 왼쪽 → 오른쪽, 오른쪽 → 왼쪽, 왼쪽 → 오른쪽 ... 으로 읽으면서 다시 문자열을 만든다.
                즉, column을 기준으로 원래 단어를 채우고, row를 기준으로 읽는 것이다.
                위의 경우에는 암호화 된 결과가 aeijfbcgklhd 가 될 것이다.
                우리가 할 일은 다음과 같다.
                암호화 된 문자열과 몇 개의 열로 암호화를 하였는지 주어져 있을 때 원래의 문자열을 구하는 프로그램을 작성하여라.
                사용자로 부터 input 받는 입력은 열의 개수 K(1 ≤ K ≤ 20)가 주어지고 두 번째 줄에는 암호화 된 문자열(모두 영소문자)이 주어진다. (문자열의 길이는 200 이하이며 K의 배수이다.)
                출력은 원래의 문자열을 출력한다.
                예를들어
                3
                aeijfbcgklhd
                가 한줄씩 순차적으로 입력되었을때
                출력은
                abcdefghijkl
                이다.
                제출한 코드를 확인하여 앞에서 설명한 문제를 완벽하게 해결해서 구동하였을때를 100점으로 했을때 제출된 코드가 몇점인지 채점해줘,
                결과는 채점한 내용에 대한 설명을 한국어로 두줄 이내로 간략하게 요약해서 알려주고 
                최종점수 : 
                이렇게 점수를 숫자로 알려줘
                최종점수를 말한 다음에는 아무 글자도 적지말아줘
                제출한 코드는 다음과 같아. \n
                """
                ]

client = OpenAI(
    api_key=api_key,  # This is the default and can be omitted
)
# 파일 존재 여부 확인 및 읽기
for i in range(len(file_names)):
    if os.path.exists(file_names[i]):
      print(f"[{i+1}번 문제 채점결과]\n")
      with open(file_names[i], "r") as f:
          loaded_code = f.read()
          chat_completion = client.chat.completions.create(
            messages=[
                {
                    "role": "user",
                    "content": gpt_messages[i] + f"{loaded_code}",
                }
            ],
            model="gpt-4o",
          )
        
      print(chat_completion.choices[0].message.content)
      print("\n\n\n")  # 줄 바꿈 추가
    else:
      print(f"파일 '{file_names[i]}' 이(가) 존재하지 않습니다.")